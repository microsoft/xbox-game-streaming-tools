{
    "$id": "https://raw.githubusercontent.com/microsoft/xbox-game-streaming-tools/main/touch-adaptation-kit/schemas/context/v4.1/context.json",
    "$schema": "https://json-schema.org/draft/2019-09/schema",
    "title": "터치 적응 번들 컨텍스트 스키마",
    "description": "터치 적응 번들 컨텍스트는 다른 레이아웃에서 참조할 수 있는 재사용 가능한 전역 상태 및 정의를 포함하는 파일입니다. 이를 통해 일반적인 스키마 코드 조각을 재사용하고 터치 컨트롤이 게임 상태에 동적으로 응답할 수 있습니다. 버전 간 변경 내용에 대한 최신 정보는 https://github.com/microsoft/xbox-game-streaming-tools/releases를 참조하세요.",
    "markdownDescription": "터치 적응 번들 컨텍스트는 다른 레이아웃에서 참조할 수 있는 재사용 가능한 전역 상태 및 정의를 포함하는 파일입니다. 이를 통해 일반적인 스키마 코드 조각을 재사용하고 터치 컨트롤이 게임 상태에 동적으로 응답할 수 있습니다. 버전 간 변경 내용에 대한 최신 정보는 https://github.com/microsoft/xbox-game-streaming-tools/releases를 참조하세요.",
    "$defs": {
        "AllowedStateValues": {
            "title": "터치 번들 허용 상태 값",
            "description": "이 속성은 동적 상태를 사용할 때 다른 자산 파일 이름과 같이 가능한 값 집합에 대한 추가 메타데이터를 제공하는 데 사용됩니다. 이는 모든 값이 유효한 터치 레이아웃이 되고 자산과 같은 추가 번들 파일이 누락되거나 사용되지 않도록 하는 유효성 검사 목적으로 사용됩니다. 이 속성은 런타임에 사용되지 않으며 유효하지 않은 레이아웃을 초래하는 모든 상태 변경 작업은 무시됩니다. 따라서 모든 경우에 적절한 작동을 보장하기 위해 광범위한 값으로 테스트하는 것이 중요합니다.",
            "markdownDescription": "이 속성은 동적 상태를 사용할 때 다른 자산 파일 이름과 같이 가능한 값 집합에 대한 추가 메타데이터를 제공하는 데 사용됩니다. 이는 모든 값이 유효한 터치 레이아웃이 되고 자산과 같은 추가 번들 파일이 누락되거나 사용되지 않도록 하는 유효성 검사 목적으로 사용됩니다. 이 속성은 런타임에 사용되지 않으며 유효하지 않은 레이아웃을 초래하는 모든 상태 변경 작업은 무시됩니다. 따라서 모든 경우에 적절한 작동을 보장하기 위해 광범위한 값으로 테스트하는 것이 중요합니다.",
            "examples": [
                {},
                {
                    "inventorySlotForegroundImage": [
                        "InventoryForegroundFireballSpell",
                        "InventoryForegroundLightningBoltSpell"
                    ],
                    "inventorySlotBackgroundImage": {
                        "$ref": "#/definitions/AllowedBackgroundImages"
                    }
                }
            ],
            "additionalProperties": false,
            "patternProperties": {
                "^(?!__proto__)[a-zA-Z0-9\\.\\-_]+$": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/StateType"
                            }
                        },
                        {
                            "$ref": "../../layout/v4.1/layout.json#/$defs/Reference"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "ContextDefinableType": {
            "title": "정의 가능한 유형",
            "description": "이 파일의 `definitions` 섹션에서 사용할 수 있는 모든 형식을 포함하는 공용 구조체 형식입니다. 자세한 내용은 `definitions` 섹션을 참조하세요.",
            "markdownDescription": "이 파일의 `definitions` 섹션에서 사용할 수 있는 모든 형식을 포함하는 공용 구조체 형식입니다. 자세한 내용은 `definitions` 섹션을 참조하세요.",
            "anyOf": [
                {
                    "$ref": "../../layout/v4.1/layout.json#/$defs/LayoutDefinableType"
                },
                {
                    "$ref": "#/$defs/StateType"
                },
                {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/StateType"
                    }
                }
            ]
        },
        "Definitions": {
            "title": "정의",
            "description": "다시 사용할 수 있는 구성 요소와 터치 레이아웃 값을 포함하는 데 사용할 수 있는 섹션입니다. 이러한 정의는 나중에 '{ \"$ref\": \"#/definitions/joystickKnobStyle\" }'와 같은 JSON 참조를 사용하여 참조할 수 있습니다. JSON 참조는 레이아웃 스키마의 거의 모든 부분에서 지원되며, 여러 컨트롤에서 사용되는 공통 단추 배경과 같은 공통 요소를 축소하여 재사용할 수 있습니다. 컨텍스트 파일은 `definitions` 속성과 `state` 지원하여 레이아웃에서 구성 요소를 다시 사용할 수 있습니다.",
            "markdownDescription": "다시 사용할 수 있는 구성 요소와 터치 레이아웃 값을 포함하는 데 사용할 수 있는 섹션입니다. 이러한 정의는 나중에 '{ \"$ref\": \"#/definitions/joystickKnobStyle\" }'와 같은 JSON 참조를 사용하여 참조할 수 있습니다. JSON 참조는 레이아웃 스키마의 거의 모든 부분에서 지원되며, 여러 컨트롤에서 사용되는 공통 단추 배경과 같은 공통 요소를 축소하여 재사용할 수 있습니다. 컨텍스트 파일은 `definitions` 속성과 `state` 지원하여 레이아웃에서 구성 요소를 다시 사용할 수 있습니다.",
            "examples": [
                {},
                {
                    "joystickAssetName": "exampleAssetName",
                    "joystickKnob": {
                        "default": {
                            "knob": {
                                "faceImage": {
                                    "type": "asset",
                                    "value": {
                                        "$ref": "#/$defs/joystickAssetName"
                                    }
                                }
                            }
                        }
                    }
                }
            ],
            "additionalProperties": false,
            "patternProperties": {
                "^(?!__proto__)[a-zA-Z0-9\\.\\-_]+$": {
                    "$ref": "#/$defs/ContextDefinableType"
                }
            },
            "type": "object"
        },
        "State": {
            "title": "번들 상태 터치",
            "description": "이 속성은 기본 값으로 사용자 지정 명명된 속성을 지정하여 터치 번들의 모든 동적 상태를 포함하는 데 사용됩니다. `XGameStreamingUpdateTouchControlsState` API를 사용하여 런타임 시 섹션의 값을 업데이트할 수 있습니다. 예를 들어 플레이어가 새로운 기술을 습득하거나 컨트롤 기본 설정을 사용자 지정할 때 플레이어 게임의 정확한 상태를 표시되는 컨트롤과 일치시키는 데 유용할 수 있습니다. 기본 문자열, 숫자 또는 부울 유형을 사용하는 터치 레이아웃의 대부분의 위치는 값을 이 상태 블록으로 다시 `$ref`로 정의하여 동적 교체를 허용합니다.",
            "markdownDescription": "이 속성은 기본 값으로 사용자 지정 명명된 속성을 지정하여 터치 번들의 모든 동적 상태를 포함하는 데 사용됩니다. `XGameStreamingUpdateTouchControlsState` API를 사용하여 런타임 시 섹션의 값을 업데이트할 수 있습니다. 예를 들어 플레이어가 새로운 기술을 습득하거나 컨트롤 기본 설정을 사용자 지정할 때 플레이어 게임의 정확한 상태를 표시되는 컨트롤과 일치시키는 데 유용할 수 있습니다. 기본 문자열, 숫자 또는 부울 유형을 사용하는 터치 레이아웃의 대부분의 위치는 값을 이 상태 블록으로 다시 `$ref`로 정의하여 동적 교체를 허용합니다.",
            "examples": [
                {},
                {
                    "inventorySlotEnabled": true,
                    "inventorySlotForegroundImage": "InventoryForeground",
                    "inventorySlotBackgroundImage": "InventoryBackground"
                }
            ],
            "additionalProperties": false,
            "patternProperties": {
                "^(?!__proto__)[a-zA-Z0-9\\.\\-_]+$": {
                    "$ref": "#/$defs/StateType"
                }
            },
            "type": "object"
        },
        "StateType": {
            "title": "번들 상태 항목 터치",
            "description": "이 속성은 `state` 구성에 나타나는 개별 항목입니다. 해당 값은 기본 문자열, 숫자 또는 부울이어야 합니다. 상태를 동적으로 업데이트하기 위해 `XGameStreamingUpdateTouchControlsState` 호출할 때 항목의 이름과 일치하는 형식의 값을 사용합니다.",
            "markdownDescription": "이 속성은 `state` 구성에 나타나는 개별 항목입니다. 해당 값은 기본 문자열, 숫자 또는 부울이어야 합니다. 상태를 동적으로 업데이트하기 위해 `XGameStreamingUpdateTouchControlsState` 호출할 때 항목의 이름과 일치하는 형식의 값을 사용합니다.",
            "examples": [
                "customAssetName",
                false,
                true,
                1,
                0
            ],
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "boolean"
                },
                {
                    "type": "integer"
                },
                {
                    "type": "number"
                }
            ]
        },
        "ContextStyles": {
            "title": "스타일",
            "description": "이 속성은 스타일 지정을 위해 이 터치 적응 번들의 레이아웃 내에서 참조할 수 있는 재사용 가능한 스타일을 정의합니다. 주어진 레이아웃 파일에 동등한 `styles` 속성이 정의되어 있으면 각각의 내용이 병합됩니다. 중복 정의가 발견되면 레이아웃의 정의가 선호되며 컨텍스트 파일의 정의를 덮어씁니다.",
            "markdownDescription": "이 속성은 스타일 지정을 위해 이 터치 적응 번들의 레이아웃 내에서 참조할 수 있는 재사용 가능한 스타일을 정의합니다. 주어진 레이아웃 파일에 동등한 `styles` 속성이 정의되어 있으면 각각의 내용이 병합됩니다. 중복 정의가 발견되면 레이아웃의 정의가 선호되며 컨텍스트 파일의 정의를 덮어씁니다.",
            "$ref": "../../layout/v4.1/layout.json#/$defs/_LayoutStyles"
        }
    },
    "type": "object",
    "properties": {
        "$schema": {
            "type": "string"
        },
        "definitions": {
            "$ref": "#/$defs/Definitions"
        },
        "state": {
            "$ref": "#/$defs/State"
        },
        "styles": {
            "$ref": "#/$defs/ContextStyles"
        },
        "allowedStateValues": {
            "$ref": "#/$defs/AllowedStateValues"
        }
    },
    "additionalProperties": false
}
